{"version":3,"file":"meta-buffer-pack.esm.js","sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../src/meta-buffer-pack.js"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { Buffer } from 'buffer/index.js'\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\n\n/*\n@params:\n-type: It's string keyword that indicate datatype.\n  8, 16, 32     default:  read and write as Uint. BigEndian.\n  i8, i16,      includes 'I' then read and write as Int.\n  16L , i16l    includes 'L  then read and write as LittleEndian.\n-value:  number to store the buffer\nreturn: Buffer\n*/\n\nexport const NB = numberBuffer;\nexport function numberBuffer(type, initValue = 0) {\n    let buffer;\n    if (type === undefined || typeof type !== 'string' || typeof initValue !== 'number') {\n        throw TypeError('invlaid init variablie type name. ')\n    }\n    type = type.toUpperCase()\n\n    if (type.includes('8')) {\n        buffer = Buffer.alloc(1)\n        if (type.includes('I')) buffer.writeInt8(initValue)\n        else buffer.writeUint8(initValue)\n\n    } else if (type.includes('16')) {\n        buffer = Buffer.alloc(2)\n        if (type.includes('I')) {\n            if (type.includes('L')) buffer.writeInt16LE(initValue)\n            else buffer.writeInt16BE(initValue)\n        } else {\n            if (type.includes('L')) buffer.writeUint16LE(initValue)\n            else buffer.writeUint16BE(initValue)\n        }\n\n    } else if (type.includes('32')) {\n        buffer = Buffer.alloc(4)\n        if (type.includes('I')) {\n            if (type.includes('L')) buffer.writeInt32LE(initValue)\n            else buffer.writeInt32BE(initValue)\n        } else {\n            if (type.includes('L')) buffer.writeUint32LE(initValue)\n            else buffer.writeUint32BE(initValue)\n        }\n    } else if (type.includes('N')) {  // number as string\n        buffer = Buffer.from(String(initValue))\n    } else {\n        console.log(`invalid type: ${type} or initvalue: ${initValue}`)\n    }\n    return buffer\n\n}\n\n\n\n/*\n@name:  name of the buffer.  \n  packer and unpacker use the name.\n@type:\n  8, 16, 32     default:  read and write as Uint. BigEndian.\n  i8, i16,      includes 'I' then read and write as Int.\n  16L , i16l    includes 'L  then read and write as LittleEndian.\n@data:\n  number : new buffer will be initilized with the value.\n  buffer without type : use the buffer\n  number without type : new buffer alloc with the size\n\n  return  ['name', data:Buffer , 'type']\n*/\n\n/* \n get buffer Object with initial value & meta info( name, data type, endian , length )\n \ninput:   name, type, initValue \nreturn:  return ['name',buffer, type ]  \n\nex. new buffer 4bytes with name.\n  MB('bufname', 4)\n\nex. \n  MB('strBuffer', 'buffer store this text' )\n\nex.\n  MB('uid', '16', 0x12EF )   => name: uid, type: uint16array, bigendian, init value 0x1234.   \n  return ['uid', <Buffer 12 EF > , '16' ] \n\nex.\n  let buf = Buffer.alloc(8)\n  MB('bufname', buf )  => name: 'bufname'   8byte buffer. \n  return ['bufname', <Buffer 00 00 00 00 00 00 00 00 > ,'b' ] \n\n*/\n\nexport const MB = metaBuffer\nexport function metaBuffer(name, typeOrData, initValue) {\n    let buffer;\n    let bufferType = 'B';\n    if (typeof typeOrData === 'number') {  // this number is buffer size. not value.\n        buffer = Buffer.alloc(typeOrData)\n        if (initValue) buffer.fill(initValue)\n        bufferType = 'B'\n    } else if (typeof typeOrData === 'string' && typeof initValue === 'number') { // number with type.\n        bufferType = typeOrData.toUpperCase()  //use explicit type name\n        buffer = numberBuffer(typeOrData, initValue) // notice.  two categories.  n: number string.  8, 16, 32: typed number.  \n    } else if (typeof typeOrData === 'string' && initValue === undefined) { //  string\n        buffer = encoder.encode(typeOrData)\n        bufferType = 'S';\n    } else if (typeOrData instanceof Uint8Array && initValue === undefined) {  // buffer \n        buffer = typeOrData\n    } else if (typeOrData.constructor.name === 'ArrayBuffer' && initValue === undefined) {\n        buffer = new Uint8Array(typeOrData)\n    } else if (ArrayBuffer.isView(typeOrData)) {\n        buffer = new Uint8Array(typeOrData.buffer, typeOrData.byteOffset, typeOrData.byteLength)\n    } else if (typeof typeOrData === 'object' && initValue === undefined) {  //   object. like array. stringify\n        buffer = encoder.encode(JSON.stringify(typeOrData))\n        bufferType = 'O'\n    } else if (typeof typeOrData === 'boolean' && initValue === undefined) {  //   object. like array. stringify\n        let v = typeOrData ? 1 : 0;\n        buffer = Buffer.from([v])\n        bufferType = '!'\n    } else {\n        prn('invalid metabuffer data err', name, typeOrData, initValue)\n    }\n\n    if (typeof name === 'string' && name.includes('#')) name = ''  // \n\n    return [name, bufferType, buffer]\n\n}\n\n\nexport const MBA = metaBufferArguments\nexport function metaBufferArguments(...args) {\n    let i = 0;\n    let mba = args.map(\n        data => {\n            let argsIndex = i++;  // index number becom metabuffer's name.\n            if (typeof data === 'number') {\n                // * JS's primitive Number stored as string. \n                return MB(argsIndex, 'N', data)\n            } else {\n                // typedarray, dataview, array, object, boolean\n                return MB(argsIndex, data)\n            }\n        })\n\n    // add parameter length. \n    mba.push(MB('$', '8', mba.length))\n    return mba\n}\n\n\n\nexport function readTypedBuffer(type, buffer, offset, length) {\n    // prn('RTB type',type)\n    if (type.includes('8')) {\n        if (type.includes('I')) {\n            return buffer.readInt8(offset)\n        } else {\n            return buffer.readUint8(offset)\n        }\n    } else if (type.includes('16')) {\n        if (type.includes('I')) {\n            if (type.includes('L')) {\n                return buffer.readInt16LE(offset)\n            } else {\n                return buffer.readInt16BE(offset)\n            }\n        } else {\n            if (type.includes('L')) {\n                return buffer.readUint16LE(offset)\n            } else {\n                return buffer.readUint16BE(offset)\n            }\n        }\n\n    } else if (type.includes('32')) {\n        if (type.includes('I')) {\n            if (type.includes('L')) {\n                return buffer.readInt32LE(offset)\n            } else {\n                return buffer.readInt32BE(offset)\n            }\n        } else {\n            if (type.includes('L')) {\n                return buffer.readUint32LE(offset)\n            } else {\n                return buffer.readUint32BE(offset)\n            }\n        }\n\n    } else if (type === 'B') { //buffer\n        return buffer.slice(offset, offset + length)\n    } else if (type === 'S') { //string or arguments\n        let strBuffer = buffer.slice(offset, offset + length)\n        return decoder.decode(strBuffer)\n    } else if (type === 'N') { // number encoded as string\n        let strNumber = buffer.slice(offset, offset + length)\n        return Number(decoder.decode(strNumber))\n    } else if (type === 'O') { // object encoded string\n        let objEncoded = buffer.slice(offset, offset + length)\n        try {\n            return JSON.parse(decoder.decode(objEncoded))\n        } catch (error) {\n            console.log('err. obj parse')\n        }\n    } else if (type === '!') { // boolean  1:true 0:false\n        let v = buffer.readInt8(offset)\n        return v === 1 ? true : false\n    } else {\n        throw TypeError('invalid data')\n\n    }\n}\n\nfunction flatSubArray(args) {\n    // prn('args',args)\n    let subArr = []\n    let mainArr = args.filter(item => {\n        if (Array.isArray(item[0])) subArr = subArr.concat(item)\n        else return item\n    })\n    return mainArr.concat(subArr)\n}\n\nexport function pack(...args) {\n    let bufArr = flatSubArray(args)\n    let size = 0;\n    let info = []\n    let offset = 0\n\n    bufArr.forEach(bufPack => {\n        let [name, type, data] = bufPack\n        size += data.byteLength\n        if (typeof name === 'number' || name.length > 0) {\n            if (type.includes('N') || type.includes('B') || type.includes('S') || type.includes('O')) {\n                info.push([name, type, offset, data.byteLength])\n            } else {\n                info.push([name, type, offset])\n            }\n        }\n        offset = size;\n    })\n\n    let infoEncoded = encoder.encode(JSON.stringify(info))\n    let infoSize = infoEncoded.byteLength\n    size = size + infoSize + 2\n\n    let buffer = Buffer.alloc(size)\n    offset = 0\n    bufArr.forEach(bufPack => {\n        let buf = bufPack[2]\n        buffer.set(buf, offset)\n        offset += buf.byteLength\n    })\n\n    buffer.set(infoEncoded, offset)\n    let infoSizeBuff = NB('16', infoSize)\n    buffer.set(infoSizeBuff, offset + infoSize)\n    return buffer\n}\n\nexport function unpack(binPack) {\n    let buffer = Buffer.from(binPack)\n    let infoSize = buffer.readUInt16BE(buffer.byteLength - 2)\n    let infoFrom = buffer.byteLength - infoSize - 2;\n    let infoEncoded = buffer.subarray(infoFrom, buffer.byteLength - 2)\n    try {\n        let decoded = decoder.decode(infoEncoded)\n        let infoArr = JSON.parse(decoded)\n        let binObj = {}\n        infoArr.forEach(bufPack => {\n            let [name, type, offset, length] = bufPack\n            binObj[name] = readTypedBuffer(type, buffer, offset, length)\n        })\n\n        // set args with values\n        if (binObj.$) {\n            let argLen = binObj.$;\n            let args = []\n            for (let n = 0; n < argLen; n++) {\n                args.push(binObj[n])\n            }\n            binObj.args = args\n            binObj.$ = binObj.args  // same  .args or .$\n        }\n        // prn('binObj',binObj)\n        return binObj\n    } catch (error) {\n        console.log('unpack: invalid data.', error)\n    }\n\n}\n\n\n\n\n/* simple parser and packer */\n// input: any\n// return uint8Array.  \n// *point*  if input number -> output is 1 byte Uint8Array that initialized by the input number.\nexport const U8 = parseUint8Array;\nexport function parseUint8Array(data) {\n\n    if (data == undefined) throw 'Invalid data type: Undefined'\n    if (typeof data === 'string') { // string > encode > uint8array\n        return encoder.encode(data)\n    } else if (typeof data === 'number') {  // number > 1 byte uint8array(number)\n        return Uint8Array.from([data])\n    } else if (data.constructor.name === 'ArrayBuffer') {  // arraybuffer > wrap uint8arra(ab)\n        return new Uint8Array(data)\n    } else if (ArrayBuffer.isView(data)) {\n        if (data.constructor.name === 'Uint8Array') {  // uint8array > return same\n            return data\n        } else {\n            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength)  // DataView, TypedArray >  uint8array( use offset, length )\n        }\n    } else { // array, object \n        return encoder.encode(JSON.stringify(data))  // object(array.. )  > JSON.str > encode > unint8array\n    }\n}\n\n// in:  arraybuffer,typedArray,DataView,number\n// return: unint8array\n// 1. normalize: any into Uint8array \n// 2. return new buffer merged.\nexport const U8pack = parseUint8ThenConcat;\nexport function parseUint8ThenConcat(...dataArray) {\n    try {\n        let bufferSize = 0\n        let offset = 0;\n        let buffers = dataArray.map(data => parseUint8Array(data))\n        buffers.forEach(buf => { bufferSize += buf.byteLength })\n        let buffer = new Uint8Array(bufferSize)\n        buffers.forEach(buf => {\n            buffer.set(buf, offset)\n            offset += buf.byteLength\n        })\n        return buffer\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\nexport function hex(buffer) {\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('')\n} // arraybuffer를 hex문자열로\n\n\nfunction prn(...data) {\n    console.log(...data)\n}\n\n"],"names":["byteLength_1","b64","lens","getLens","validLen","placeHoldersLen","toByteArray_1","tmp","i","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray_1","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","value","c","rt","abs","isNaN","floor","log","LN2","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","encoder","TextEncoder","decoder","TextDecoder","NB","numberBuffer","initValue","toUpperCase","MB","metaBuffer","typeOrData","bufferType","encode","JSON","stringify","v","prn","MBA","metaBufferArguments","args","mba","map","argsIndex","readTypedBuffer","strBuffer","decode","strNumber","objEncoded","parse","U8","parseUint8Array","U8pack","parseUint8ThenConcat","dataArray","bufferSize","buffers","forEach","bufArr","subArr","filter","item","flatSubArray","info","bufPack","infoEncoded","infoSize","infoSizeBuff","binPack","infoFrom","decoded","infoArr","binObj","$","argLen"],"mappings":"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"}